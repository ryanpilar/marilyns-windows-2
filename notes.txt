Run Node 16.8.0

Don't forget to do when pushing production
    1.  Change the blogRoute for the React-Shares, currently set to a netlify path
    2.  Change the galleryRoute for the React-Shares, currently set to a netlify path
    3.  Change blogRoute and galleryRoute for 'recomended' cards in blogPost and GalleryPost
    4.  
Upgrades in future
    1.  Load Gallery in patches of 8 images and have a 'load more' btn.

Things I would do differently
    1.  Set up cloudinary images differently. Have a dynamic template string so you don't
        have to go in one by one in contenful
            -   but what if the image doesn't line up correctly? What are your position options then?


       
Weird things I had to do: 

    1.  Had to trim a lot of the template down. And since it was React, all linked components, 
        files, images etc had to be deleted too. This just means you have to go into a lot of 
        files to comment our / delete these linked whatevers.

    2.  Netlify
            a.  On Netlify deploy, React internal routing worked great, that is to say that you 
                navigate to (http://yourWebsiteName.com) and it brings you to the index page, 
                and on that index page you click the 'about' button, and it takes you to 
                http://yourWebsiteName.com/about... but if you were to start the whole process by 
                trying to first navigate to http://yourWebsiteName.com/about, you would get a 
                404 error. Too add, routing seemed to work fine when locally deployed.

                SOLUTION: adding a _redirect file inside public/ folder and put, /* /index.html 
                200, inside of that file, and voil√† the links are now working on Netlify. Source:
                https://answers.netlify.com/t/netlify-page-not-found-when-sharing-react-router-dom-based-links/11744/12 

            b.  Google started ranking my netlify.app and it wasn't picking up my redirects (301).
                The sequence of the redirects in your _redirects file MATTERS!

                    This is incorrect:
                        https://marilyns-windows.netlify.app/*  https://www.marilynswindows.com/:splat  301!
                        http://marilyns-windows.netlify.app/*  https://www.marilynswindows.com/:splat  301!
                        /* /index.html 200

                    This is correct:
                        https://marilyns-windows.netlify.app/*  https://www.marilynswindows.com/:splat  301!
                        http://marilyns-windows.netlify.app/*  https://www.marilynswindows.com/:splat  301!
                        /* /index.html 200

    3.  --opensl problem (https://stackoverflow.com/questions/69962209/what-is-openssl-legacy-provider-in-node-js-v17)

        -   "But why did it happen this time only and not usually?" Because some module uses commands 
            that aren't supported anymore. "Do I have to do the same for all my projects in future?" 
            Only when you use modules that use unsupported commands. I don't know why this commands 
            aren't supported anymore and if it is related to security but using unsupported commands 
            should be a red flag. 
        -   Due to changes on Node.js v17, --openssl-legacy-provider was added for handling key size 
            on OpenSSL v3. You somehow have installed the latest version of node.

            1.  Restore your previous version of nodejs.
            2.  Go and manually remove the node dependency(e.g. "node":17.4.3) from package.json and packagelock.json.
            3.  Delete node_modules folder and use npm install to reinstall node_modules.
            
        -   For Node.js v17+, you need to put the openssl-legacy-provider flag after your command, for example:
            -   From npm --openssl-legacy-provider start to npm start --openssl-legacy-provider start
            -   From npm --openssl-legacy-provider build to npm start --openssl-legacy-provider build

    4.  Owl carousel problem
        -   Seems like OwlCarousel doesn't re-render upon state change and as such even though your state updates and your 
            callback sends it new set of children, OwlCarousel stays as it was from the initial render. 
            
            It does have callback hooks 
            that you can tie your updates into so that it will update, but seems like very poor documentation 
            so I did not spend time on it. There's something called onRefresh hook that you can use that takes in a 
            function but again no example that tells you how to do it. https://owlcarousel2.github.io/OwlCarousel2/docs/api-events.html

        -   To overcome this I wrapped OwlCarousel in the length check which will only render once 
            state has something to render after API call returns.

            https://stackoverflow.com/questions/56771532/react-owl-carousel-is-blank

    5.  bg-paralax unsupportive in iOS devices 
        -   background-attachment: fixed not supported in ios
        -   i put a media query in that targets hover and the background-attachment: initial. 

    6.  square_shape2 and other square_shape's cause a interesting clearfixing issue that i couldn't solve. It was
        particularly problesome when make a quicklinks or a table of contents. When you press the link to smooth scroll
        downwards, when you scrolled back up, text near the top would completely disapear.